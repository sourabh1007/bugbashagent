---
name: Go Best Practices Sub-Prompt
description: Language-specific best practices sub-prompt for Go code generation to avoid compilation errors
inputs:
  testing_framework:
    type: string
    description: The testing framework being used for Go
---

**Go Specific Best Practices:**
1. Include proper package declarations and imports
2. Handle errors explicitly: `if err != nil { return err }`
3. Use proper variable declarations: `var name Type` or `name := value`
4. Initialize slices/maps: `make([]Type, 0)` or `make(map[Type]Type)`
5. Use defer for cleanup operations
6. Check for nil before dereferencing pointers
7. Follow Go naming conventions (exported names capitalized)

**{{testing_framework}} Framework Guidelines:**
- Standard testing: Use TestXxx functions, testing.T, t.Error()/t.Fatal()
- Testify: Use suite.Suite, assert.Equal(), require.NoError()
- Ginkgo: Use Describe(), It(), Expect().To()
