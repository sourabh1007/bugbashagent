---
name: Cosmos DB C# SDK Guidance
description: C# specific guidance for Azure Cosmos DB SDK
authors:
  - Bug Bash Agent Team
inputs:
  version:
    type: string
    description: SDK version being targeted
---

**COSMOS DB C# (.NET) SDK SPECIFIC GUIDANCE:**

**üîß CORE C# CONCEPTS:**
- **CosmosClient**: Main entry point - `new CosmosClient(connectionString)` or `new CosmosClient(endpoint, key)`
- **Database**: `client.GetDatabase("dbName")` 
- **Container**: `database.GetContainer("containerName")`

**‚ö†Ô∏è COSMOS DB V3 SDK SPECIFICS:**
- Always use async/await with Cosmos operations
- Include `new PartitionKey(value)` for single-item operations
- Catch `CosmosException` for Cosmos-specific errors
- Import `using Microsoft.Azure.Cosmos;`

**üö® COMMON V3 SDK ERRORS TO AVOID:**
‚ùå **Missing Async/Await**: `container.CreateItemAsync(item)` without await
‚ùå **Missing PartitionKey**: `ReadItemAsync(id)` without partition key parameter  
‚ùå **Wrong Exception Type**: Catching `Exception` instead of `CosmosException`
‚ùå **Missing Using**: Not importing `Microsoft.Azure.Cosmos`

**‚úÖ CLIENT INITIALIZATION PATTERN (for client initialization scenarios):**
```csharp
[Test]
public async Task CosmosClient_WithValidCredentials_ShouldInitializeSuccessfully()
{
    // Arrange
    string endpoint = "https://localhost:8081";
    string key = "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==";
    
    // Act
    var client = new CosmosClient(endpoint, key);
    var accountProperties = await client.ReadAccountAsync();
    
    // Assert
    Assert.That(client, Is.Not.Null);
    Assert.That(accountProperties.Resource.Id, Is.Not.Null.And.Not.Empty);
}
```


